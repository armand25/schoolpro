<?php

namespace admin\ScolariteBundle\Entity;
use \admin\UserBundle\Types\TypeEtat;

/**
 * ClasseRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ClasseRepository extends \Doctrine\ORM\EntityRepository
{
 
use \admin\UserBundle\ControllerModel\paramUtilTrait;    
    
    /*
     * Retourne un ou tous les profils si $idClasse = 0
     * @param int $idClasse
     * @return array
     */
    public function getAllOrOneClasse($idClasse) {
        $idClasseQuery = (int) $idClasse;
        $qb = $this->createQueryBuilder('p')
                ->where('p.etatClasse != ' . TypeEtat::SUPPRIME)
                ;
        if($idClasse > 0){
            $qb->andWhere('p.id =:idClasse')
                    ->setParameter('idClasse', $idClasseQuery);
            
        }
        return $qb->getQuery()->getResult();
    }
    
    /*
     * Retourne tous les profils
     * @return type
     */
    public function getAllClasse() {
        $qb = $this->createQueryBuilder('e')
                ->where('e.etatClasse != ' . TypeEtat::SUPPRIME);
               // ->orderBy('e.typeClasse', 'ASC');
        return $qb->getQuery()->getResult();
    }    
    /*
     * Retourne tous les profils
     * @return type
     */
    public function getAllActifClasse() {
        $qb = $this->createQueryBuilder('e')
                ->where('e.etatClasse = ' . TypeEtat::ACTIF);
               // ->orderBy('e.typeClasse', 'ASC');
        return $qb->getQuery()->getResult();
    }  
    
    /**
     * Retourne les payeur actifs dont le nom ou le prénom contien $like
     * @param type $like
     * @return type
     */
    
    public function getClasseEnseignant($id, $idannee) {
        $dql = "SELECT DISTINCT(u.id) as id, u.nom, u.prenoms FROM " . $this->userBundle . "Utilisateur u INNER JOIN u.fairecourss f "
                . " INNER JOIN f.classe c "
                . " INNER JOIN f.anneescolaire an "
                . " WHERE an.id =:idannee AND c.id =:idclasse ";

        $query = $this->_em->createQuery($dql);
        $query->setParameter('idannee', $idannee);
        $query->setParameter('idclasse', $id);
       // $query->setParameter('codeProfil', TypeCodeProfil::PAYEUR);

        return $query->getResult();
    }
    /**
     * Retourne les classes dans laquelle enseigne un utilisateur
     * @param type $like
     * @return type
     */
    
    public function getEnseignantHisClasse($id, $idannee) {
        $dql = "SELECT DISTINCT(c.id) as id, c.libelleClasse,c.descriptionClasse, c.etatClasse FROM " . $this->scolariteBundle . "Classe c "                 
                . " INNER JOIN c.fairecourss f "
                . " INNER JOIN f.utilisateur u  "
                . " INNER JOIN f.anneescolaire an "
                . " WHERE an.id =:idannee AND u.id =:idens ";

        $query = $this->_em->createQuery($dql);
        $query->setParameter('idannee', $idannee);
        $query->setParameter('idens', $id);
       // $query->setParameter('codeProfil', TypeCodeProfil::PAYEUR);

        return $query->getResult();
    }
    /**
     * Retourne les payeur actifs dont le nom ou le prénom contien $like
     * @param type $like
     * @return type
     */
    
    public function getInfoRecapNote($id, $idannee,$iddecoup,$type) {
        
        $dql = "SELECT r.id, r.moyenneClasse, r.moyenneCompo, r.moyenneGenerale FROM " . $this->scolariteBundle . "RecapMoyenneGenerale r INNER JOIN r.decoupage d "
                . " INNER JOIN r.setrouver s "
                . " INNER JOIN s.classe c "
                . " INNER JOIN s.anneescolaire an "
                . " WHERE an.id = :idannee AND c.id = :idclasse AND d.id = :iddecoupage";
        if($type == 1){
            $dql .= " ORDER BY r.moyenneClasse DESC "; 
        }elseif($type == 2){
            $dql .= " ORDER BY r.moyenneCompo DESC ";
        }else{
            $dql .= " ORDER BY r.moyenneGenerale DESC ";
        }
        $query = $this->_em->createQuery($dql);
        $query->setParameter('idannee', $idannee);
        $query->setParameter('idclasse', $id);
        
        $query->setParameter('iddecoupage', $iddecoup);
       // $query->setParameter('codeProfil', TypeCodeProfil::PAYEUR);

        return $query->getResult();
    }
    
}
