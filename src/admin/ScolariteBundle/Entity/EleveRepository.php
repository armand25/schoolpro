<?php

namespace admin\ScolariteBundle\Entity;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
use \admin\UserBundle\Types\TypeEtat;
use \admin\UserBundle\Types\TypeCodeProfil;

/**
 * ProfilRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EleveRepository extends EntityRepository {

    /*
     * 
     * @var string  $scolariteBundle
     * Nom du Bundle
     */
    private $scolariteBundle = 'adminScolariteBundle:';

   

    /*
     * Recherhe un user ki tente de se connecter au système
     * 
     * @param string $email
     * @param tring $password
     * @return User
     */
    public function getOneEleveOnLogin($email, $password) {
        $qb = $this->createQueryBuilder('a')
                ->where('a.etat !=:etat ')
                ->andWhere('a.email =:email ')
                ->andWhere('a.password =:password ')
//                ->andWhere('a.etatConnecte =:etatConnecte')
//                ->setParameter('etatConnecte', FALSE)
                ->setParameter('email', $email)
                ->setParameter('password', $password)
                ->setParameter('etat', \admin\UserBundle\Types\TypeEtat::SUPPRIME)
        ;

        return $qb->getQuery()->getOneOrNullResult();
    }

    /*
     * Retourne tous les abonnés du profil $idProfil. SI $idProfil = 0, alors on retourne ts les abonnés 
     * 
     * @param type $idProfil
     * @param type $nbParPage
     * @param type $pageActuelle
     * @param type $idGestionnaire
     * @return Paginator
     */
    public function getAllEleve($idProfil = 0, $nbParPage = 20, $pageActuelle = 1, $idGestionnaire = 0) {
        //var_dump('tester');exit;
        $nbTotal = $this->getNbAllEleve($idProfil);
        $rep = array('data' => array(), 'nbParPage' => $nbParPage, 'pageActuelle' => $pageActuelle, 'nbTotal' => $nbTotal, 'nbTotalPage' => 1);
        
        $idProfilQuery = (int) $idProfil;
        $qb = $this->createQueryBuilder('a')
                ->where('a.etat !=:etatU')
                ->setParameter('etatU', TypeEtat::SUPPRIME)
//                ->addSelect('p')
//                ->leftJoin('a.profil', 'p')
//                ->andWhere('p.etat !=:etatP ')
//                ->setParameter('etatP', TypeEtat::SUPPRIME)
//                ->andWhere('p.typeProfil =' . \admin\UserBundle\Types\TypeProfil::PROFIL_ABONNE)
        ;



//        if ($idProfil > 0) {
//            $qb->andWhere('p.id =:idProfil')
//                    ->setParameter('idProfil', $idProfilQuery);
//        }
//        $qb->orderBy('p.nom, a.nom', 'ASC');

        $pageActuelleInt = (int) $pageActuelle;
        $nbParPageInt = (int) $nbParPage;
        if ($pageActuelleInt < 1) {
            $pageActuelleInt = 1;
        }
        if ($nbParPageInt < 1) {
            $nbParPageInt = 20;
        }

        $nbTotalPage = (int) ceil($nbTotal / $nbParPage);
        if ($nbTotalPage < 1) {
            $nbTotalPage = 1;
        }
        if ($pageActuelleInt > $nbTotalPage) {
            $pageActuelleInt = $nbTotalPage;
        }

        $query = $qb->getQuery();
        $query->setFirstResult(($pageActuelleInt - 1) * $nbParPageInt);
        $query->setMaxResults($nbParPageInt);
        $rep['nbParPage'] = $nbParPage;
        $rep['pageActuelle'] = $pageActuelle;
        $rep['nbTotal'] = $nbTotal;
        $rep['nbTotalPage'] = $nbTotalPage;
        $rep['data'] = new Paginator($query);

        return $rep;
    }
    
    public function getListeRechercheEleve($etab='',$nom='0', $prenom='0',$sexe='', $classe='0', $degre='0', $niveau='0',$datedeb, $datefin,$annee='0',$nbParPage = 20, $pageActuelle = 1,$ansEnCours='0') {
            
        $param = array();
      $nbTotal= 10000;
      $paramdeb = $datedeb;//implode('/', array_reverse( explode('-',$datedeb) ) ) ;
      $paramfin =$datefin; //implode('/', array_reverse( explode('-',$datefin) ) ) ;
      
        $sql = "SELECT DISTINCT e.id,  e.nom , e.prenoms , e.titreImage ,e.username, e.email,e.etatConnecte, e.tel1 , e.etat,e.sexe,c.libelleClasse, et.libelleEtablissement                         
                FROM   adminScolariteBundle:Eleve e ";
                 $sql .= " INNER JOIN e.setrouvers s ";              
                 $sql .= " INNER JOIN s.classe c ";
                 $sql .= " INNER JOIN e.etablissement et ";
                 $sql .= " INNER JOIN s.anneescolaire a ";
          
           if($degre !='0'|| $niveau !=''){
               $sql .= " INNER JOIN c.filiere f";
               $sql .= " INNER JOIN f.enseignement ens ";
               $sql .= " INNER JOIN ens.degre d ";
           }
           if( $niveau !='0' || $niveau !=''){               
               $sql .= " INNER JOIN c.niveau n";
           }
           $sql .= " WHERE a.id = :anneescolaire and 1=1 ";        
            /**  debut critère recherche  * */
            // ( ($deb == null) || ($deb == 0) )? $sql.="' : $sql.=' AND  o.dateValeur >= :deb and o.dateValeur <= :fin ';
                (  $datedeb != 0 && $datedeb != "" ) ?  $sql.=" AND  e.dateInscription >= " . " '" . $paramdeb . "' "  : $sql.='';
                (  $datefin != 0 && $datefin != "" ) ?  $sql.=" AND  e.dateInscription <= " . " '" . $paramfin . "' "  : $sql.='';
             
                
       
         ( $etab == '0' || $etab =='') ? $sql .= '' : $sql .= ' AND et.id = :etab';
         ( $nom == '0' || $nom =='') ? $sql .= '' : $sql .= ' AND e.nom like :nom ';
         ( $ansEnCours == '0' || $ansEnCours =='') ? $sql .= '' : $sql .= ' AND e.dateInscription like :an ';
         if ( $prenom == '0' || $prenom =='' ) { $sql .= '' ;}else{ $sql .= ' AND e.prenoms like :prenoms  ';}
         ( $sexe == '0' || $sexe =='') ? $sql .= '' : $sql .= ' AND e.sexe = :sexe';
        
         ( $classe == '0' || $classe =='') ? $sql.='' : $sql.=' AND c.id = :classe ';
         ( $degre == '0' || $degre =='') ? $sql.='' : $sql.=' AND d.id = :degre ';
         ( $niveau == '0' || $niveau =='') ? $sql.='' : $sql.=' AND n.id = :niveau ';
         
        /** Fin critère recherche * */
        $sql.=' ORDER BY e.nom DESC ';
       
        /**  debut parametres  * */
       ( $nom == '0' || $nom =='') ? $sql .= '' :  $param['nom'] = '%'.$nom.'%';
       ( $etab == '0' || $etab =='') ? $sql .= '' :   $param['etab'] = $etab;
       ( $ansEnCours == '0' || $ansEnCours =='') ? $sql .= '' : $param['an'] = '%'.$ansEnCours.'%';
       ($prenom =='0' || $prenom =='') ? $sql .= '' : $param['prenoms'] = '%'.$prenom.'%'; ;
       ($sexe == '0' || $sexe =='') ? $sql .= '' : $param['sexe'] = $sexe; 
       ($classe == '0'  || $classe =='') ? $sql .= '' :  $param['classe'] = $classe;; 
       ($degre == '0' || $degre =='') ? $sql .= '' :  $param['degre'] = $degre;
       ($niveau == '0' || $niveau =='') ? $sql .= '' :  $param['niveau'] = $niveau;
       
      
        
       
        $param['anneescolaire']=$annee;
        
       
        $pageActuelleInt = (int) $pageActuelle;
        $nbParPageInt = (int) $nbParPage;
        if ($pageActuelleInt < 1) {
            $pageActuelleInt = 1;
        }
        if ($nbParPageInt < 1) {
            $nbParPageInt = 20;
        }

        $nbTotalPage = (int) ceil($nbTotal / $nbParPage);
        if ($nbTotalPage < 1) {
            $nbTotalPage = 1;
        }
        if ($pageActuelleInt > $nbTotalPage) {
            $pageActuelleInt = $nbTotalPage;
        }
	
       
     

//        $query->setFirstResult(($page * $articles_per_page) - $articles_per_page);
//        $query->setMaxResults($articles_per_page);
//        var_dump($total);exit;
        //var_dump($deb);var_dump($fin);var_dump($sql); var_dump($param);exit;
//        return $query->getResult();
//        $query = $qb->getQuery();
         	
        $query = $this->_em->createQuery($sql);
       $query->setParameters($param);
 //       var_dump( $query->getSQL());exit;
//        $query->setFirstResult(($pageActuelleInt - 1) * $nbParPageInt);
//        $query->setMaxResults($nbParPageInt);
//        $rep['nbParPage'] = $nbParPage;
//        $rep['pageActuelle'] = $pageActuelle;
//        $rep['nbTotal'] = $nbTotal;
//        $rep['nbTotalPage'] = $nbTotalPage;
//        $rep['data'] = new Paginator($query);

        return $query->getResult();
        
    } 

    /*
     * Recherhe un user ki tente de se connecter au système sans succes. 
     * Si le user existe, on poura changer son attribut attempt
     * @param type $email
     * @return type
     */
    public function getOneEleveOnLoginForAttempt($email) {
        $qb = $this->createQueryBuilder('a')
                ->where('a.etat !=:etat ')
                ->andWhere('a.email =:email ')
                ->setParameter('email', $email)
                ->setParameter('etat', \admin\UserBundle\Types\TypeEtat::SUPPRIME);

        return $qb->getQuery()->getOneOrNullResult();
    }

    /*
     * Retourne le nb d'abonne auant le profil $idProfil. Si $idProfil = 0 on compte tous les utilisateurs
     * @param type $idProfil
     */
    public function getNbAllEleve($idProfil = 0) {
        $idProfilQuery = (int) $idProfil;
        $qb = $this->createQueryBuilder('a')
                ->where('a.etat !=:etatU')
                ->setParameter('etatU', TypeEtat::SUPPRIME)
//                ->addSelect('p')
//                ->leftJoin('a.profil', 'p')
//                ->andWhere('p.etat !=:etatP ')
//                ->setParameter('etatP', TypeEtat::SUPPRIME)
//                ->andWhere('p.typeProfil =' . \admin\UserBundle\Types\TypeProfil::PROFIL_ABONNE)
        ;

        if ($idProfil > 0) {
            $qb->andWhere('p.id =:idProfil')
                    ->setParameter('idProfil', $idProfilQuery)
                    ->orderBy('p.nom', 'ASC');
        }
        $qb->orderBy('a.nom', 'ASC');

        $rep = $qb->getQuery()->getResult();
        return count($rep);
    }

    // -----------------------------------------------------------

    /*
     * Retourne les payeur actifs dont le nom ou le prénom contien $like
     * @param type $like
     * @return type
     */
    public function getPayeurNomLike($like) {
        $dql = "SELECT a FROM " . $this->userBundle . "Eleve a JOIN a.profil p WHERE p.code =:codeProfil AND p.etat =:etatProfil AND a.etat =:etat AND (a.nom like '%" . $like . "%' OR a.prenoms like '%" . $like . "%')";

        $query = $this->_em->createQuery($dql);
        $query->setParameter('etat', TypeEtat::ACTIF);
        $query->setParameter('etatProfil', TypeEtat::ACTIF);
        $query->setParameter('codeProfil', TypeCodeProfil::PAYEUR);

        return $query->getResult();
    }
    /*
     * Retourne les payeur actifs dont le nom ou le prénom contien $like
     * @param type $like
     * @return type
     */
    public function getClasseEnCours($id, $idannee) {
        $dql = "SELECT c FROM " . $this->scolariteBundle . "Classe c INNER JOIN c.setrouvers s "
                . " INNER JOIN s.eleve e "
                . " INNER JOIN s.anneescolaire an "
                . " WHERE an.id =:idannee AND e.id =:ideleve ";

        $query = $this->_em->createQuery($dql);
        $query->setParameter('idannee', $idannee);
        $query->setParameter('ideleve', $id);
       // $query->setParameter('codeProfil', TypeCodeProfil::PAYEUR);

        return $query->getResult();
    }
    
    
    /*
     * Retourne les payeur actifs dont le nom ou le prénom contien $like
     * @param type $like
     * @return type
     */
    public function getListeEleveClasse($id, $idannee,$etabl=1) {
        $dql = "SELECT e FROM " . $this->scolariteBundle . "Eleve e INNER JOIN e.setrouvers s "
                . " INNER JOIN s.classe c "
                . " INNER JOIN s.anneescolaire an "
                . " INNER JOIN e.etablissement et "
                . " WHERE an.id =:idannee AND c.id =:idclasse AND et.id =:idet";

        $query = $this->_em->createQuery($dql);
        $query->setParameter('idannee', $idannee);
        $query->setParameter('idclasse', $id);
        $query->setParameter('idet', $etabl);
       // $query->setParameter('codeProfil', TypeCodeProfil::PAYEUR);
       
        return $query->getResult();
    }
    
    /*
     * Retourne les payeur actifs dont le nom ou le prénom contien $like
     * @param type $like
     * @return type
     */
    public function getListeSeTrouverEleveClasse($id, $idannee) {
        $dql = "SELECT s FROM " . $this->scolariteBundle . "Setrouver s INNER JOIN s.eleve e "
                . " INNER JOIN s.classe c "
                . " INNER JOIN s.anneescolaire an "
                . " WHERE an.id =:idannee AND c.id =:idclasse ";

        $query = $this->_em->createQuery($dql);
        $query->setParameter('idannee', $idannee);
        $query->setParameter('idclasse', $id);
       // $query->setParameter('codeProfil', TypeCodeProfil::PAYEUR);
       
        return $query->getResult();
    }

    /*
     * Retourne les abonné actifs dont le nom ou le prénom contien $like
     * @param type $like
     * @return type
     */
    public function getEleveNomLike($like, $codeProfilUser) {
        $dql = "SELECT a FROM " . $this->userBundle . "Eleve a WHERE a.etat =:etat ";
        if (strlen($like) > 0) {
            $dql .= " AND (a.nom like '%" . $like . "%' OR a.prenoms like '%" . $like . "%')";
        }
        if ($codeProfilUser == TypeCodeProfil::GESTIONNAIRE) {
            $dql = "SELECT a FROM " . $this->userBundle . "Eleve a JOIN a.gestionnaire u JOIN u.profil p WHERE a.etat =:etat AND p.code =:code ";
            if (strlen($like) > 0) {
                $dql .= " AND (a.nom like '%" . $like . "%' OR a.prenoms like '%" . $like . "%')";
            }
        } else if ($codeProfilUser == TypeCodeProfil::MESSAGERIE_EMETTEUR) {
            $dql = "SELECT a FROM " . $this->userBundle . "Eleve a  WHERE a.etat =:etat AND  a.gestionnaire  is NULL ";
        }


        $query = $this->_em->createQuery($dql);
        $query->setParameter('etat', TypeEtat::ACTIF);

        if ($codeProfilUser == TypeCodeProfil::GESTIONNAIRE) {
            $query->setParameter('code', $codeProfilUser);
        }

        return $query->getResult();
    }

    public function getAllEleveMessagerie() {
        $qb = $this->createQueryBuilder('a')
                ->where('a.etat !=:etat')
                ->setParameter('etat', TypeEtat::SUPPRIME);

        return $qb->getQuery()->getResult();
    }

    /*
     * Retourne tous les abonnés du profil $idProfil. SI $idProfil = 0, alors on retourne ts les abonnés 
     * @param int $idProfil Description
     * @return array
     */
    public function getAllEleveTest($idProfil = 0, $nbParPage = 20, $pageActuelle = 1) {
        $nbTotal = $this->getNbAllEleve($idProfil);
        $rep = array('data' => array(), 'nbParPage' => $nbParPage, 'pageActuelle' => $pageActuelle, 'nbTotal' => $nbTotal, 'nbTotalPage' => 1);
        $idProfilQuery = (int) $idProfil;

        $dql = "SELECT a FROM " . $this->userBundle . "Eleve a WHERE a.etat !=:etatU JOIN a.profil p AND  p.etat !=:etapP "
                . "AND p.typeProfil =" . \admin\UserBundle\Types\TypeProfil::PROFIL_ABONNE;

        if ($idProfil > 0) {
            $dql .= " AND p.id =:idProfil ";
        }

        $dql .= "ORDER BY a.nom, p.nom DESC ";

        $query = $this->_em->createQuery($dql);
        $query->setParameter('etatU', TypeEtat::SUPPRIME);
        $query->setParameter('etatP', TypeEtat::SUPPRIME);
        if ($idProfil > 0) {
            $query->setParameter('idProfil', $idProfilQuery);
        }

        $pageActuelleInt = (int) $pageActuelle;
        $nbParPageInt = (int) $nbParPage;
        if ($pageActuelleInt < 1) {
            $pageActuelleInt = 1;
        }
        if ($nbParPageInt < 1) {
            $nbParPageInt = 20;
        }

        $nbTotalPage = (int) ceil($nbTotal / $nbParPage);
        if ($nbTotalPage < 1) {
            $nbTotalPage = 1;
        }
        if ($pageActuelleInt > $nbTotalPage) {
            $pageActuelleInt = $nbTotalPage;
        }

//        $query = $qb->getQuery();
        $query->setFirstResult(($pageActuelleInt - 1) * $nbParPageInt);
        $query->setMaxResults($nbParPageInt);
        $rep['nbParPage'] = $nbParPage;
        $rep['pageActuelle'] = $pageActuelle;
        $rep['nbTotal'] = $nbTotal;
        $rep['nbTotalPage'] = $nbTotalPage;
        $rep['data'] = new Paginator($query);

        return $rep;
    }

    /*
     * Cette methode recherche la liste des abonnes 
     * 
     * @param string $locale pour la gestion multilangue
     * @return array : un tableau d'abonnes
     */
    public function findAllByLocale() {
        /*
         * Variable globale recupérée depuis parameters.yml
         * $articles_per_page = $this->container->getParameter('max_articles_on_listepage');
         */

        //Make a Select query
        $query = $this->_em->createQuery('SELECT a.id as id,a.nom,a.prenoms as nomPrenom, a.username as username, a.email as email'
                . ' FROM adminUserBundle:Eleve a ORDER BY a.id DESC');

        return $query->getResult();
    }

    /*
     * Cette methode retourne le nombre d'abonnes suivant des criteres specifies
     * 
     * 
     * @param int $type : type de compte afbw - afbw2 - uweb
     * @param string $deb : date debut periode
     * @param string $fin : date fin periode
     * @param string $cpte: Numero de compte
     * @param string $username : pseudo de l'abonne
     * @param string $nomprenom : nom et prenom de l'abonne
     * @param int $gestionnaire : identifiant du gestionnaire
     * @param int $profil : Identifiant du profil
     * @param int $total : Nombre total d'elements de la requete
     * @param int $page : Numero de page en cours
     * @param int $articles_per_page : Nombre d'elements par page
     * @return array : un tableau d'abonne
     */
    public function getEleveChoisiLocale($nomprenom) {
        $param = array();

        $sql = 'SELECT DISTINCT a.nom,a.id,a.email,a.username                         
              FROM  adminUserBundle:abonne a 
                  ';
        $sql .= ' WHERE  1=1  ';
        ( trim($nomprenom) == '') ? $sql.='' : $sql.=' AND lower(a.nom) LIKE :nomprenom ';

        if (trim($nomprenom) != '') {
            $param['nomprenom'] = "%" . $nomprenom . "%";
        }

        $query = $this->_em->createQuery($sql);
        $sql.='  ORDER BY a.id DESC';

        $query->setParameters($param);

        return $query->getResult();
    }

}
