<?php

namespace admin\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;
use \admin\UserBundle\Types\TypeEtat;
use \admin\UserBundle\Types\TypeCodeProfil;
use \admin\UserBundle\Types\TypeProfil;

/**
 * ProfilRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UtilisateurRepository extends EntityRepository {

    /*
     * 
     * @var string  $facturier
     * Nom du Bundle
     */
    use \admin\UserBundle\ControllerModel\paramUtilTrait;

  

    /*
     * Retourne le liste des superviseurs
     * @return type
     */
    public function getSuperviseurs() {
        $qb = $this->createQueryBuilder('u')
                ->where('u.etat !=:etat ')
                ->setParameter('etat', TypeEtat::SUPPRIME)
                ->addSelect('p')
                ->leftJoin('u.profil', 'p')
                ->andWhere('p.code =:code')
                ->setParameter('code', TypeCodeProfil::SUPERVISEUR)
                ->orderBy('u.nom', 'ASC')
        ;


        return $qb->getQuery()->getResult();
    }

    /*
     * Recherhe un user ki tente de se connecter au système sans succes. En supposant kil a oublie son mot de passe
     * Si le user existe, on poura changer son attribut attempt
     * @param type $email
     * @return type
     */
    public function getOneUserOnLoginForAttempt($username) {
        $qb = $this->createQueryBuilder('u')
                ->where('u.etat !=:etat ')
                ->andWhere('u.username =:username ')
                ->setParameter('username', $username)
                ->setParameter('etat', TypeEtat::SUPPRIME);

        return $qb->getQuery()->getOneOrNullResult();
    }

    /*
     * Recherhe un user ki tente de se connecter au système
     * 
     * @param string $email
     * @param tring $password
     * @return User
     */
    public function getOneUserOnLogin($username, $password) {
        $qb = $this->createQueryBuilder('u')
                ->where('u.etat !=:etat ')
                ->andWhere('u.username =:username ')
                ->andWhere('u.password =:password ')
//                ->andWhere('u.etatConnecte =:etatConnecte')
//                ->setParameter('etatConnecte', FALSE)
                ->setParameter('username', $username)
                ->setParameter('password', $password)
                ->setParameter('etat', TypeEtat::SUPPRIME)
        ;

        return $qb->getQuery()->getOneOrNullResult();
    }

    public function getAllUser($idProfil = 0) {
        $idProfilQuery = (int) $idProfil;
        $qb = $this->createQueryBuilder('u')
                ->where('u.etat !=:etatU')
                ->setParameter('etatU', TypeEtat::SUPPRIME)
                ->addSelect('p')
                ->leftJoin('u.profil', 'p')
                ->andWhere('p.etat !=:etatP ')
                ->setParameter('etatP', TypeEtat::SUPPRIME)
              //->andWhere('p.typeProfil =' . TypeProfil::PROFIL_UTILISATEUR)
        ;

        if ($idProfil > 0) {
            $qb->andWhere('p.id =:idProfil')
                    ->setParameter('idProfil', $idProfilQuery);
        }
        $qb->orderBy('p.nom, u.nom', 'ASC');
        return $qb->getQuery()->getResult();
    }
    public function getAllUserEtablissement($idProfil = 0,$idEtabl) {
        $idProfilQuery = (int) $idProfil;
        $qb = $this->createQueryBuilder('u')
                ->where('u.etat !=:etatU')
                ->setParameter('etatU', TypeEtat::SUPPRIME)
                ->addSelect('p')
                ->leftJoin('u.profil', 'p')
                ->leftJoin('u.etablissement', 'e')
                ->andWhere('p.etat !=:etatP ')
                ->andWhere('e.id =:id ')
                ->setParameter('etatP', TypeEtat::SUPPRIME)
                ->setParameter('id', $idEtabl)
              //->andWhere('p.typeProfil =' . TypeProfil::PROFIL_UTILISATEUR)
        ;

        if ($idProfil > 0) {
            $qb->andWhere('p.id =:idProfil')
                    ->setParameter('idProfil', $idProfilQuery);
        }
        $qb->orderBy('p.nom, u.nom', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    //Rucperation de  la liste des utilisateur pour un profil donnée en utlisant Ajax
    public function getAllUserByProfilAjax($idProfil = 0) {
        $idProfilQuery = (int) $idProfil;
        $sql =  ' SELECT DISTINCT u.id, u.nom, u.prenoms '
                   .' FROM '.$this->userBundle.'Utilisateur u '
                   .' INNER JOIN u.profil p '
                   .' WHERE  p.id = :cid '
                   .' AND   u.etat != :etat ';
                  
           
            $query = $this->_em->createQuery($sql);
            $query->setParameters(array('cid'=> $idProfilQuery, 'etat'=> TypeEtat::SUPPRIME));
           
            return $query->getResult();
        
    }

    // -----------------------------------



    public function getUsersMessageriePayeur() {
        $dql = "SELECT a FROM " . $this->userBundle . "Utilisateur a JOIN a.profil p WHERE a.etat =:etat AND p.etat =:etat2 AND p.code = '" . TypeCodeProfil::MESSAGERIE_EMETTEUR . "'";

        $query = $this->_em->createQuery($dql);
        $query->setParameter('etat', TypeEtat::ACTIF);
        $query->setParameter('etat2', TypeEtat::ACTIF);

        return $query->getResult();
    }
    
    
    public function getAllUserMatiere($idmat) {
        $dql = "SELECT a.id,a.nom, a.prenoms FROM " . $this->userBundle . "Utilisateur a JOIN a.profil p"
                . " JOIN a.matieres m WHERE a.etat =:etat and m.id =:id ";

        $query = $this->_em->createQuery($dql);
        $query->setParameter('etat', TypeEtat::ACTIF);
        $query->setParameter('id', $idmat);

        return $query->getResult();
    }
    
    
    public function getAllMatiereDoUser($idens) {
        $dql = "SELECT m.id,m.libelleMatiere FROM " . $this->scolariteBundle . "Matiere m "
                . " JOIN m.utilisateurs u WHERE m.etatMatiere =:etat and u.id =:id ";

        $query = $this->_em->createQuery($dql);
        $query->setParameter('etat', TypeEtat::ACTIF);
        $query->setParameter('id', $idens);

        return $query->getResult();
    }



    /*
     * Retourne les utilisateurs actifs dont le nom ou le prénom contien $like
     * @param type $like
     * @return type
     */
    public function getUsersNomLike($like, $idUserConnecte) {
        $dql = "SELECT a FROM " . $this->userBundle . "Utilisateur a WHERE a.etat =:etat AND a.id !=:id AND  (a.nom like '%" . $like . "%' OR a.prenoms like '%" . $like . "%')";

        $query = $this->_em->createQuery($dql);
        $query->setParameter('etat', TypeEtat::ACTIF);
        $query->setParameter('id', $idUserConnecte);

        return $query->getResult();
    }

    /*
     * Cette methode retourne un utilisateur
     * 
     * @param int $idgest : identifiant de gestionnaire
     * @return array: tableau d'utilisateur autres ayant un profil different de celui de gestionnaire
     */
    public function findAutreUtilisateur($idgest) {
        //$idprofilgestionnaire = $this->container->getParameter('idgestionnaire');
        //Make a Select query
        $query = $this->_em->createQuery('SELECT u.id as idgest,u.nom as nomPrenom , 
            u.username,  u.email
            FROM adminUserBundle:Utilisateur u 
            WHERE u.id !=:id')
                ->setParameter('id', $idgest);

        return $query->getResult();
    }

}
