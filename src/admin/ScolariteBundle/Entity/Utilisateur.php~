<?php

namespace admin\UserBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use \admin\UserBundle\Entity\Profil;
use \admin\UserBundle\Entity\Connexion;
use \Doctrine\Common\Collections\ArrayCollection;
use \DateTime;

/**
 * User
 *
 * @ORM\Table(name="utilisateur")
 * @ORM\Entity(repositoryClass="admin\UserBundle\Entity\UtilisateurRepository")
 */
class Utilisateur {

    /**
     * @var integer $id
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string $username
     *
     * @ORM\Column(name="username_user", type="string", length=50,  nullable=true)
     * @Assert\Length(max=50)
     */
    private $username;

    /**
     * @var string $nom
     *
     * @ORM\Column(name="nom_user", type="string", length=50)
     * @Assert\Length(max=50)
     */
    private $nom;

    /**
     * @var string $prenoms
     *
     * @ORM\Column(name="prenoms_user", type="string", length=50, nullable=true)
     * 
     */
    private $prenoms;

    /**
     * @var string $email
     *
     * @ORM\Column(name="email_user", type="string", length=50, unique=true)
     * @Assert\Email
     */
    private $email;

    /**
     * @var string $tel1
     *
     * @ORM\Column(name="tel1_user", type="string", length=20)
     */
    private $tel1;

    /**
     * @var string $tel2
     *
     * @ORM\Column(name="tel2_user", type="string", length=20, nullable=true)
     */
    private $tel2;

    /**
     * @var string $adresse
     *
     * @ORM\Column(name="adresse_user",   type="text", nullable=true)
     */
    private $adresse;

    /**
     * @var integer $etat
     *
     * @ORM\Column(name="etat_user", type="smallint")
     */
    private $etat;

    /**
     * @var integer $attempt
     *
     * @ORM\Column(name="attempt_user", type="smallint")
     */
    private $attempt;

    /**
     * @var string $password
     *
     * @ORM\Column(name="password_user", type="string", length=255, nullable=false)
     * @Assert\Length(max=255)
     */
    private $password;

    /**
     * @var string $cPassword
     *
     * @ORM\Column(name="c_password_user", type="string", length=255, nullable=true)
     */
    private $cPassword;

    /**
     * @var string $salt
     *
     * @ORM\Column(name="salt_user", type="string", length=255)
     */
    private $salt;

    /**
     * @var boolean $etatConnecte
     *
     * @ORM\Column(name="etat_connecte", type="boolean")
     */
    private $etatConnecte;

    /**
     * @var string $adresseIp
     *
     * @ORM\Column(name="adresse_ip_user", type="string", length=100, nullable=true)
     */
    private $adresseIp;

    /**
     * @var integer $sexe
     *
     * @ORM\Column(name="sexe_user", type="smallint", nullable=false)
     */
    private $sexe;

    /**
     * @var \DateTime $dateAjout
     *
     * @ORM\Column(name="date_ajout_user", type="datetime")
     */
    private $dateAjout;

    /**
     * @var \DateTime $dateModification
     *
     * @ORM\Column(name="date_edit_user", type="datetime", nullable=true)
     */
    private $dateModification;

    /**
     * @var string $lossPasswordUrl
     *
     * @ORM\Column(name="loss_password_url_user", type="string", length=255, nullable=true)
     */
    private $lossPasswordUrl;

    /**
     * @var \DateTime $dateLossPassword
     *
     * @ORM\Column(name="date_loss_password_user", type="datetime", nullable=true)
     */
    private $dateLossPassword;

    /**
     * @var Profil  $profil
     * @ORM\ManyToOne(targetEntity="admin\UserBundle\Entity\Profil", inversedBy="utilisateurs")
     * @ORM\JoinColumn(nullable=false)
     */
    private $profil;

    /**
     *
     * @var ArrayCollection $connexions
     * @ORM\OneToMany(targetEntity="admin\UserBundle\Entity\Connexion",mappedBy="utilisateurs")
     */
    private $connexions;

    /**
     * @var ArrayCollection commandes
     * @ORM\OneToMany(targetEntity="admin\StockBundle\Entity\Commande", cascade={"persist", "remove"}, mappedBy="utilisateur")
     */
    private $commandes;
    
    /**
     * @var ArrayCollection commandeTmps
     * @ORM\OneToMany(targetEntity="admin\StockBundle\Entity\CommandeTmp", cascade={"persist", "remove"}, mappedBy="utilisateur")
     */
    private $commandeTmps;
    
    
    public function __construct() {
        $this->attempt = 0;
        $this->cPassword = '';
        $this->salt = md5(uniqid(null, true));
        $this->etat = \admin\UserBundle\Types\TypeEtat::ACTIF;
        $this->etatConnecte = FALSE;
        $this->dateAjout = new \DateTime();
        $this->connexions = new ArrayCollection();
        $this->sexe = \admin\UserBundle\Types\TypeSexe::MASCULIN;
        $this->adresseIp = '';
        $this->messagesEnvois = new ArrayCollection();
    }

    /**
     * Get id
     *
     * @return integer 
     */
    public function getId() {
        return $this->id;
    }

    /**
     * Set username
     *
     * @param string $username
     * @return Utilisateur
     */
    public function setUsername($username) {
        $this->username = $username;

        return $this;
    }

    /**
     * Get username
     *
     * @return string 
     */
    public function getUsername() {
        return $this->username;
    }

    /**
     * Set nom
     *
     * @param string $nom
     * @return Utilisateur
     */
    public function setNom($nom) {
        $this->nom = $nom;

        return $this;
    }

    /**
     * Get nom
     *
     * @return string 
     */
    public function getNom() {
        return $this->nom;
    }

    /**
     * Set prenoms
     *
     * @param string $prenoms
     * @return Utilisateur
     */
    public function setPrenoms($prenoms) {
        $this->prenoms = $prenoms;

        return $this;
    }

    /**
     * Get prenoms
     *
     * @return string 
     */
    public function getPrenoms() {
        return $this->prenoms;
    }

    /**
     * Set email
     *
     * @param string $email
     * @return Utilisateur
     */
    public function setEmail($email) {
        $this->email = $email;

        return $this;
    }

    /**
     * Get email
     *
     * @return string 
     */
    public function getEmail() {
        return $this->email;
    }

    /**
     * Set tel1
     *
     * @param string $tel1
     * @return Utilisateur
     */
    public function setTel1($tel1) {
        $this->tel1 = $tel1;

        return $this;
    }

    /**
     * Get tel1
     *
     * @return string 
     */
    public function getTel1() {
        return $this->tel1;
    }

    /**
     * Set tel2
     *
     * @param string $tel2
     * @return Utilisateur
     */
    public function setTel2($tel2) {
        $this->tel2 = $tel2;

        return $this;
    }

    /**
     * Get tel2
     *
     * @return string 
     */
    public function getTel2() {
        return $this->tel2;
    }

    /**
     * Set adresse
     *
     * @param string $adresse
     * @return Utilisateur
     */
    public function setAdresse($adresse) {
        $this->adresse = $adresse;

        return $this;
    }

    /**
     * Get adresse
     *
     * @return string 
     */
    public function getAdresse() {
        return $this->adresse;
    }

    /**
     * Set etat
     *
     * @param integer $etat
     * @return Utilisateur
     */
    public function setEtat($etat) {
        $this->etat = $etat;

        return $this;
    }

    /**
     * Get etat
     *
     * @return integer 
     */
    public function getEtat() {
        return $this->etat;
    }

    /**
     * Set attempt
     *
     * @param integer $attempt
     * @return Utilisateur
     */
    public function setAttempt($attempt) {
        $this->attempt = $attempt;

        return $this;
    }

    /**
     * Get attempt
     *
     * @return integer 
     */
    public function getAttempt() {
        return $this->attempt;
    }

    /**
     * Set password
     *
     * @param string $password
     * @return Utilisateur
     */
    public function setPassword($password) {
        $this->password = $password;

        return $this;
    }

    /**
     * Get password
     *
     * @return string 
     */
    public function getPassword() {
        return $this->password;
    }

    /**
     * Set cPassword
     *
     * @param string $cPassword
     * @return Utilisateur
     */
    public function setCPassword($cPassword) {
        $this->cPassword = $cPassword;

        return $this;
    }

    /**
     * Get cPassword
     *
     * @return string 
     */
    public function getCPassword() {
        return $this->cPassword;
    }

    /**
     * Set salt
     *
     * @param string $salt
     * @return Utilisateur
     */
    public function setSalt($salt) {
        $this->salt = $salt;

        return $this;
    }

    /**
     * Get salt
     *
     * @return string 
     */
    public function getSalt() {
        return $this->salt;
    }

    /**
     * Set etatConnecte
     *
     * @param boolean $etatConnecte
     * @return Utilisateur
     */
    public function setEtatConnecte($etatConnecte) {
        $this->etatConnecte = $etatConnecte;

        return $this;
    }

    /**
     * Get etatConnecte
     *
     * @return boolean 
     */
    public function getEtatConnecte() {
        return $this->etatConnecte;
    }

    /**
     * Set adresseIp
     *
     * @param string $adresseIp
     * @return Utilisateur
     */
    public function setAdresseIp($adresseIp) {
        $this->adresseIp = $adresseIp;

        return $this;
    }

    /**
     * Get adresseIp
     *
     * @return string 
     */
    public function getAdresseIp() {
        return $this->adresseIp;
    }

    /**
     * Set sexe
     *
     * @param integer $sexe
     * @return Utilisateur
     */
    public function setSexe($sexe) {
        $this->sexe = $sexe;

        return $this;
    }

    /**
     * Get sexe
     *
     * @return integer 
     */
    public function getSexe() {
        return $this->sexe;
    }

    /**
     * Set dateAjout
     *
     * @param \DateTime $dateAjout
     * @return Utilisateur
     */
    public function setDateAjout($dateAjout) {
        $this->dateAjout = $dateAjout;

        return $this;
    }

    /**
     * Get dateAjout
     *
     * @return \DateTime 
     */
    public function getDateAjout() {
        return $this->dateAjout;
    }

    /**
     * Set dateModification
     *
     * @param \DateTime $dateModification
     * @return Utilisateur
     */
    public function setDateModification($dateModification) {
        $this->dateModification = $dateModification;

        return $this;
    }

    /**
     * Get dateModification
     *
     * @return \DateTime 
     */
    public function getDateModification() {
        return $this->dateModification;
    }

    /**
     * Set lossPasswordUrl
     *
     * @param string $lossPasswordUrl
     * @return Utilisateur
     */
    public function setLossPasswordUrl($lossPasswordUrl) {
        $this->lossPasswordUrl = $lossPasswordUrl;

        return $this;
    }

    /**
     * Get lossPasswordUrl
     *
     * @return string 
     */
    public function getLossPasswordUrl() {
        return $this->lossPasswordUrl;
    }

    /**
     * Set dateLossPassword
     *
     * @param \DateTime $dateLossPassword
     * @return Utilisateur
     */
    public function setDateLossPassword($dateLossPassword) {
        $this->dateLossPassword = $dateLossPassword;

        return $this;
    }

    /**
     * Get dateLossPassword
     *
     * @return \DateTime 
     */
    public function getDateLossPassword() {
        return $this->dateLossPassword;
    }

    /**
     * Set profil
     *
     * @param \admin\UserBundle\Entity\Profil $profil
     * @return Utilisateur
     */
    public function setProfil(\admin\UserBundle\Entity\Profil $profil) {
        $this->profil = $profil;

        return $this;
    }

    /**
     * Get profil
     *
     * @return \admin\UserBundle\Entity\Profil 
     */
    public function getProfil() {
        return $this->profil;
    }

    /**
     * Add connexions
     *
     * @param \admin\UserBundle\Entity\Connexion $connexions
     * @return Utilisateur
     */
    public function addConnexion(\admin\UserBundle\Entity\Connexion $connexions) {
        $this->connexions[] = $connexions;

        return $this;
    }

    /**
     * Remove connexions
     *
     * @param \admin\UserBundle\Entity\Connexion $connexions
     */
    public function removeConnexion(\admin\UserBundle\Entity\Connexion $connexions) {
        $this->connexions->removeElement($connexions);
    }

    /**
     * Get connexions
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getConnexions() {
        return $this->connexions;
    }

    /**
     * Add commandes
     *
     * @param \admin\StockBundle\Entity\Commande $commandes
     * @return Utilisateur
     */
    public function addCommande(\admin\StockBundle\Entity\Commande $commandes)
    {
        $this->commandes[] = $commandes;
    
        return $this;
    }

    /**
     * Remove commandes
     *
     * @param \admin\StockBundle\Entity\Commande $commandes
     */
    public function removeCommande(\admin\StockBundle\Entity\Commande $commandes)
    {
        $this->commandes->removeElement($commandes);
    }

    /**
     * Get commandes
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getCommandes()
    {
        return $this->commandes;
    }

    /**
     * Add commandeTmps
     *
     * @param \admin\StockBundle\Entity\CommandeTmp $commandeTmps
     * @return Utilisateur
     */
    public function addCommandeTmp(\admin\StockBundle\Entity\CommandeTmp $commandeTmps)
    {
        $this->commandeTmps[] = $commandeTmps;
    
        return $this;
    }

    /**
     * Remove commandeTmps
     *
     * @param \admin\StockBundle\Entity\CommandeTmp $commandeTmps
     */
    public function removeCommandeTmp(\admin\StockBundle\Entity\CommandeTmp $commandeTmps)
    {
        $this->commandeTmps->removeElement($commandeTmps);
    }

    /**
     * Get commandeTmps
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getCommandeTmps()
    {
        return $this->commandeTmps;
    }
}
