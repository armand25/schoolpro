<?php

namespace admin\CmsBundle\Repository;
use \admin\UserBundle\Types\TypeEtat;

/**
 * ZoneRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ZoneRepository extends \Doctrine\ORM\EntityRepository
{
    
        /*
     * Retourne un ou tous les profils si $idZone = 0
     * @param int $idZone
     * @return array
     */
    public function getAllOrOneZone($idZone) {
        $idZoneQuery = (int) $idZone;
        $qb = $this->createQueryBuilder('p')
                ->where('p.etatZone != ' . TypeEtat::SUPPRIME)
                ;
        if($idZone > 0){
            $qb->andWhere('p.id =:idZone')
                    ->setParameter('idZone', $idZoneQuery);
            
        }
        return $qb->getQuery()->getResult();
    }
    
    /*
     * Retourne tous les profils
     * @return type
     */
    public function getAllZone() {
        $qb = $this->createQueryBuilder('e')
                ->where('e.etatZone != ' . TypeEtat::SUPPRIME);
        return $qb->getQuery()->getResult();
    }
        /*
     * Retourne tous les zones avec les etablissements
     * @return type
     */
    public function getAllZonePage($idPage,$idEtabl=0) {
          $sql = "SELECT DISTINCT z.id as id, zp.id as idzp, z.titreZone, zp.typeElement, zp.pointeVers, zp.etatZone                      
                FROM   adminCmsBundle:Zone z ";
                 $sql .= " INNER JOIN z.page p ";              
                 $sql .= " INNER JOIN z.zonepointeetablissements zp ";
                 $sql .= " INNER JOIN zp.etablissement e ";
                 $sql .= " WHERE 1=1 and z.etatZone =:etatZone and p.id =:idPage"; 
                 $idEtabl == 0 ? $sql .= '' : $sql .= ' AND e.id = :etab';
                 
                 $param['etatZone'] = TypeEtat::ACTIF;
                 $param['idPage'] = $idPage;
                 $idEtabl == 0 ? $sql .= '' :  $param['etab'] = $idEtabl;
                 $query = $this->_em->createQuery($sql);
                 $query->setParameters($param);
//        $qb = $this->createQueryBuilder('zo')
//                ->innerJoin('zo.page', 'p')
//                ->innerJoin('zo.zonepointeetablissements', 'z')
//                ->innerJoin('z.etablissement', 'e')
//                ->where('zo.etatZone != ' . TypeEtat::SUPPRIME)
//                ->andWhere('p.id = ' .$idPage );
//              if($idEtabl !=0){
//                $qb->andWhere('e.id = ' .$idEtabl );
//              }
        return $query->getResult();
    }
        /*
     * Retourne tous les zones avec les etablissements
     * @return type
     */
    public function getAllZoneSimplePage($idPage) {
        $qb = $this->createQueryBuilder('zo')
                ->innerJoin('zo.page', 'p')
                ->where('zo.etatZone != ' . TypeEtat::SUPPRIME)
                ->andWhere('p.id = ' .$idPage );
            
        return $qb->getQuery()->getResult();
    }
}
