<?php

namespace admin\EconomatBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * TypeOperationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TypeOperationRepository extends EntityRepository
{
    
     public function getListeTypeOperation($total, $page, $articles_per_page) {
            $param = array();

            $sql = "SELECT DISTINCT a.id,a.codeOperation,a.libTypeOperation,a.nbreLigne 
                    FROM adminEconomatBundle:TypeOperation a";
            $sql.=" WHERE 1=1 and a.suppr = 0 ";

            /**  debut parametres  * */   

            $query = $this->_em->createQuery($sql);

            //$limit==0 ? $sql.='' :  $query->setMaxResults($limit); 

           // $query->setParameters($param);
            $query->setFirstResult(($page * $articles_per_page) - $articles_per_page);
            $query->setMaxResults($articles_per_page);
            return $query->getResult();
    }
    
    public function getSiTypeOperationExiste($id, $locale, $nomagence) {
        //Make a Select query

        $count = 0;

        $sql = 'SELECT count(p.libTypeOperation) 
                FROM adminEconomatBundle:TypeOperation p
                WHERE LOWER(trim(p.libTypeOperation)) = :nom  ';
        ($id == 0) ? $sql .= '' : $sql .= ' AND p.libTypeOperation != :codeoperation';
        $query = null;
        $query = $this->_em->createQuery($sql);

        ($id == 0) ?
                        $query->setParameters(array('nom' => $nomagence)) :
                        $query->setParameters(array('nom' => $nomagence, 'codeoperation' => $id ));

        /* $query->setHint(
          \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
          'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
          );
          // Force the locale
          $query->setHint(
          \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
          $locale
          ); */

        try {
            $count = $query->getSingleScalarResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            $count = 0;
        }

        return $count;
    }
    
    public function getSiTypeOperationDeleted($id, $locale, $nomagence) {
        //Make a Select query

        $count = 0;

        $sql = 'SELECT count(p.libTypeOperation) 
                FROM adminEconomatBundle:TypeOperation p
                WHERE LOWER(trim(p.libTypeOperation)) = :nom  ';
        ($id == 0) ? $sql .= '' : $sql .= ' AND p.libTypeOperation != :codeoperation';
        $query = null;
        $query = $this->_em->createQuery($sql);

        ($id == 0) ?
                        $query->setParameters(array('nom' => $nomagence)) :
                        $query->setParameters(array('nom' => $nomagence, 'codeoperation' => $id));

        /* $query->setHint(
          \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
          'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
          );
          // Force the locale
          $query->setHint(
          \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
          $locale
          ); */

        try {
            $count = $query->getSingleScalarResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            $count = 0;
        }

        return $count;
    }
}
