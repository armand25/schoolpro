<?php

namespace admin\EconomatBundle\Entity;

use Doctrine\ORM\EntityRepository;
use admin\UserBundle\Types\TypeEtat;

/**
 * OperationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OperationRepository extends EntityRepository
{
     public function getListeOperationCommande($id) {

          $query = $this->_em->createQuery(
                        'SELECT o,c
                        FROM adminStockBundle:Operation o INNER JOIN o.commande c 
                        WHERE c.id = :id'
                            )->setParameter('id',$id );
          return  $query->getResult();
    } 
        /**
     * Retourne tous les fournisseurs.
     *
     * @return type
     */
    public function getAllOperation()
    {
        $qb = $this->createQueryBuilder('r')
                ->where('r.etatOperation != '.TypeEtat::SUPPRIME)
                ->orderBy('r.id', 'ASC');

        return $qb->getQuery()->getResult();
    } 
    
    public function getOperationsCaisseBrouillard($caisse, $typedate,$datedeb, $datefin, $typeop, $total, $page, $articles_per_page, $idprod, $idab='0',$compte='0', $details='0') {
            
        $param = array();

       $paramdeb = $datedeb;//implode('/', array_reverse( explode('-',$datedeb) ) ) ;
      $paramfin =$datefin; //implode('/', array_reverse( explode('-',$datefin) ) ) ;
        
         
      //var_dump($idprod);exit;
     
     // o.soldeLigne,o.chrgjr,
        $sql = "SELECT DISTINCT o.id,  o.sensOperation AS sens , o.refFacture , o.dateOperation, o.montant , o.numMvt, o.libOperation                         
                FROM   adminStockBundle:Operation o ";
                
           if($idab =='0'){
               $sql .= " INNER JOIN o.produit c
                       INNER JOIN c.categorie ca ";
           }else{
              $compte ='PL0105' ;
           }
              $sql .=   " INNER JOIN o.typeoperation t 
                       INNER JOIN o.plancomptable p 
                WHERE  1=1  ";
              
        if($idab =='0'){      
            /**  debut critère recherche  * */
            // ( ($deb == null) || ($deb == 0) )? $sql.="' : $sql.=' AND  o.dateValeur >= :deb and o.dateValeur <= :fin ';
            if( $typedate==0 ){
                (  $datedeb != 0 && $datedeb != "" ) ?  $sql.=" AND  o.dateOperation >= " . " '" . $paramdeb . "' "  : $sql.='';
                (  $datefin != 0 && $datefin != "" ) ?  $sql.=" AND  o.dateOperation <= " . " '" . $paramfin . "' "  : $sql.='';
             }
             else{
                (  $datedeb != 0 && $datedeb != "" ) ?  $sql.=" AND  o.dateValeur >= " . " '" . $paramdeb . "' "  : $sql.='';
                (  $datefin != 0 && $datefin != "" ) ?  $sql.=" AND  o.dateValeur <= " . " '" . $paramfin . "' "  : $sql.='';
             }
        } 
       
         ($caisse == 0) ? $sql .= '' : $sql .= 'AND c.id = :caisse ';
         
         ($details == '0' ) ? $sql .= '' : $sql .= 'AND o.libOperation like :details  ';
         ($compte == '0') ? $sql .= '' : $sql .= 'and p.compte = :compte';
         
        ( trim($typeop) == 0) ? $sql.='' : $sql.=' AND o.refFacture = :typeop ';
         
        if($idab =='0'){( trim($idprod) == 0) ? $sql.='' : $sql.=' AND ca.id = :idprod ';}
        
        ( trim($idab) == '0') ? $sql.='' : $sql.=' AND o.idAbonne = :idab ';

        /** Fin critère recherche * */
        $sql.=' ORDER BY o.id DESC';

        /**  debut parametres  * */
        
        if (trim($typeop) != 0) {
            $param['typeop'] = $typeop;
        }
        if($idab =='0'){
            if (trim($idprod) != 0) {
                $param['idprod'] = $idprod;
            }
        }
        if (trim($idab) != '0') {
            $param['idab'] = $idab;
        }
        if (trim($details) != '0') {
            $param['details'] = '%'.$details.'%';
        }
        if (trim($caisse) != 0) {
            $param['caisse'] = $caisse;
        }
        
        if (trim($compte) != '0') {
            
            $param['compte'] = $compte;
            
        }
        
        /** Fin parametres et valeur * */
		
        $query = $this->_em->createQuery($sql);

        $query->setParameters($param);
     //  var_dump( $query->getSQL());exit;

//        $query->setFirstResult(($page * $articles_per_page) - $articles_per_page);
//        $query->setMaxResults($articles_per_page);
//        var_dump($total);exit;
        //var_dump($deb);var_dump($fin);var_dump($sql); var_dump($param);exit;
        return $query->getResult();
        
    }    
    
    public function getTotalOperationsBrouillard($caisse, $datedeb, $datefin, $typeop,$typedate) {
        
        $param = array();
        
        $paramdeb = implode('-', array_reverse( explode('-',$datedeb) ) ) ;
        $paramfin = implode('-', array_reverse( explode('-',$datefin) ) ) ;
 
        /*$sql = 'SELECT count(o.id)                   
                FROM   adminStockBundle:Operation o
                       INNER JOIN o.caisse c
                       INNER JOIN o.typeoperation t 
                WHERE  1 = 1  ';*/
        $sql = "SELECT count(o.id)                 
                FROM   adminStockBundle:Operation o
                       INNER JOIN o.caisse c
                       INNER JOIN o.typeoperation t 
                       INNER JOIN o.plancomptable p 
                      
                WHERE  p.compte = c.plancomptable  ";
        
        
        /**  debut critère recherche  * */
        // ( ($deb == null) || ($deb == 0) )? $sql.='' : $sql.=' AND  o.dateValeur >= :deb and o.dateValeur <= :fin ';
       if( $typedate==0 ){
            (  $datedeb != 0 ) ?  $sql.=" AND  o.dateOperation >= " . " '" . $paramdeb . "' "  : $sql.='';
            (  $datefin != 0 ) ?  $sql.=" AND  o.dateOperation <= " . " '" . $paramfin . "' "  : $sql.='';
         }
         else{
            (  $datedeb != 0 ) ?  $sql.=" AND  o.dateValeur >= " . " '" . $paramdeb . "' "  : $sql.='';
            (  $datefin != 0 ) ?  $sql.=" AND  o.dateValeur <= " . " '" . $paramfin . "' "  : $sql.='';
         }
         
         ($caisse == 0) ? $sql .= '' : $sql .= 'AND c.id = :caisse ';
         
        ( trim($typeop) == 0) ? $sql.='' : $sql.=' AND t.id = :typeop ';

        /** Fin critère recherche * */

        /**  debut parametres  * */        
        if (trim($typeop) != 0) {
            $param['typeop'] = $typeop;
        }
        if (trim($caisse) != 0) {
            $param['caisse'] = $caisse;
        }
        /** Fin parametres et valeur * */		
        $query = $this->_em->createQuery($sql);
        $query->setParameters($param);
         try {
                //$lavaleur = $query->getResult();
                $lavaleur = $query->getSingleScalarResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
                $lavaleur = 0;
        }
       return $lavaleur;  
        
    }    
}
